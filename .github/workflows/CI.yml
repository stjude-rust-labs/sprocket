name: Rust CI

on:
  push:
    branches:
      - main
  pull_request:

env:
  GH_TOKEN: ${{ github.token }}

jobs:
  format:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Update Rust
        run: rustup update nightly && rustup default nightly
      - name: Install rustfmt
        run: rustup component add rustfmt
      - name: Check source code formatting
        run: cargo --locked fmt -- --check

  sort:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Update Rust
        run: rustup update stable
      - name: Install `cargo-sort`
        run: cargo install cargo-sort
      - name: Check for sorted `Cargo.toml`
        run: cargo --locked sort -w --check

  lint:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Update Rust
        run: rustup update stable && rustup default stable
      - name: Install clippy
        run: rustup component add clippy
      - name: Check source code for lints
        run: cargo --locked clippy --all-features -- --deny warnings

  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - uses: ./.github/actions/install-shellcheck
      - name: Update Rust
        run: rustup update stable && rustup default stable
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Setup Docker (Mac)
        if: ${{'macos-latest' == matrix.os}}
        run: |
          brew update
          brew install docker
          brew install qemu
          brew install colima
          brew install lima-additional-guestagents
          # M1 and M2 Macs that the Github Actions supplies don't support nested virtualization. This forces x86 emulation to get around this
          #--mount /private is necessary here in order to give docker access to mac's temp directory for tests
          colima start --mount /private --memory 4 --network-address --arch x86_64
          echo "DOCKER_HOST=unix:///Users/runner/.colima/docker.sock" >> $GITHUB_ENV
      - name: Setup WSL (Windows)
        if: ${{'windows-latest' == matrix.os}}
        uses: Vampire/setup-wsl@v5
      - name: Install Podman (Windows)
        if: ${{'windows-latest' == matrix.os}}
        run: |
          curl -L --url "https://github.com/containers/podman/releases/download/v5.5.1/podman-5.5.1-setup.exe" -o Podman.exe
          Start-Process Podman.exe -Wait -ArgumentList "/norestart /passive" -Verb runAs;
          Add-Content $env:GITHUB_PATH "C:\Program Files\RedHat\Podman\"
      - name: Startup Docker (Windows)
        if: ${{'windows-latest' == matrix.os}}
        run: |
          podman machine init
          podman machine set --rootful
          podman machine start
          Add-Content $env:GITHUB_ENV "DOCKER_HOST=npipe:////./pipe/podman-machine-default"

      # TODO ACF 2025-09-18: these pulls are absorbed from the `wdl` repo's CI script. Since the
      # Sprocket CI is already setting up container runtimes on Mac and Windows, should we revisit
      # whether these steps are Linux-only?
      - run: docker pull ubuntu:latest
        if: runner.os == 'Linux'
      - run: docker pull ubuntu:focal
        if: runner.os == 'Linux'
      - run: docker pull ghcr.io/multiqc/multiqc:v1.31
        if: runner.os == 'Linux'
      - run: docker pull alpine:latest
        if: runner.os == 'Linux'

      - name: Run tests
        run: cargo --locked test --workspace --all-features --no-fail-fast

  docs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Update Rust
        run: rustup update stable && rustup default stable
      - run: cargo --locked doc

  gauntlet:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - run: git config --global core.autocrlf false
      - name: Update Rust
        run: rustup update stable && rustup default stable
      - run: cargo --locked run -p gauntlet --release --bin gauntlet

  arena:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - uses: ./.github/actions/install-shellcheck
      - run: git config --global core.autocrlf false
      - name: Update Rust
        run: rustup update stable && rustup default stable
      - run: cargo --locked run -p gauntlet --release --bin gauntlet -- --arena

  workspace-lints-enabled:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Update Rust
        run: rustup update stable && rustup default stable
      - run: cargo --locked install cargo-workspace-lints
      - run: cargo --locked workspace-lints

  deny:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Update Rust
        run: rustup update stable && rustup default stable
      - run: cargo --locked install cargo-deny
      - run: cargo --locked deny check

  msrv:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Update Rust
        run: rustup update stable && rustup default stable
      - name: Install cargo-binstall
        run: curl -L --proto '=https' --tlsv1.2 -sSf https://raw.githubusercontent.com/cargo-bins/cargo-binstall/main/install-from-binstall-release.sh | bash
      - name: Install cargo-msrv
        run: cargo --locked binstall -y --version 0.16.0-beta.23 cargo-msrv
      - name: Verify the MSRV
        working-directory: ./crates/wdl
        run: cargo --locked msrv verify --output-format minimal --all-features

  udeps:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Update Rust
        run: rustup update nightly && rustup default nightly
      - name: Install cargo-udeps
        run: cargo --locked install cargo-udeps
      - name: Ensure no unused dependencies
        run: cargo --locked udeps
