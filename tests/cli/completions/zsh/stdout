#compdef sprocket

autoload -U is-at-least

_sprocket() {
    typeset -A opt_args
    typeset -a _arguments_options
    local ret=1

    if is-at-least 5.2; then
        _arguments_options=(-s -S -C)
    else
        _arguments_options=(-s -C)
    fi

    local context curcontext="$curcontext" state line
    _arguments "${_arguments_options[@]}" : \
'-c+[Path to the configuration file]:CONFIG:_default' \
'--config=[Path to the configuration file]:CONFIG:_default' \
'*-v[Increase logging verbosity]' \
'*--verbose[Increase logging verbosity]' \
'(-v --verbose)*-q[Decrease logging verbosity]' \
'(-v --verbose)*--quiet[Decrease logging verbosity]' \
'-s[Skip searching for and loading configuration files]' \
'--skip-config-search[Skip searching for and loading configuration files]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
'-V[Print version]' \
'--version[Print version]' \
":: :_sprocket_commands" \
"*::: :->sprocket" \
&& ret=0
    case $state in
    (sprocket)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:sprocket-command-$line[1]:"
        case $line[1] in
            (analyzer)
_arguments "${_arguments_options[@]}" : \
'--stdio[Use stdin and stdout for the RPC transport]' \
'--lint[Whether or not to enable all lint rules]' \
'*-v[Increase logging verbosity]' \
'*--verbose[Increase logging verbosity]' \
'(-v --verbose)*-q[Decrease logging verbosity]' \
'(-v --verbose)*--quiet[Decrease logging verbosity]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
&& ret=0
;;
(check)
_arguments "${_arguments_options[@]}" : \
'*-e+[Excepts (ignores) an analysis or lint rule]:RULE:(CallInputSpacing CommandSectionIndentation CommentWhitespace ConciseInput ConsistentNewlines ContainerUri DeclarationName DeprecatedObject DeprecatedPlaceholder DoubleQuotes ElementSpacing EndingNewline ExpectedRuntimeKeys ExpressionSpacing HereDocCommands ImportPlacement ImportSorted ImportWhitespace InputName InputSorted KnownRules LineWidth LintDirectiveFormatted LintDirectiveValid MatchingOutputMeta MetaDescription MetaKeyValueFormatting MetaSections OutputName OutputSection ParameterMetaMatched PascalCase PreambleCommentPlacement PreambleFormatted RedundantNone RequirementsSection RuntimeSection SectionOrdering ShellCheck SnakeCase TodoComment TrailingComma UnnecessaryFunctionCall UnusedCall UnusedDeclaration UnusedImport UnusedInput VersionStatementFormatted Whitespace)' \
'*--except=[Excepts (ignores) an analysis or lint rule]:RULE:(CallInputSpacing CommandSectionIndentation CommentWhitespace ConciseInput ConsistentNewlines ContainerUri DeclarationName DeprecatedObject DeprecatedPlaceholder DoubleQuotes ElementSpacing EndingNewline ExpectedRuntimeKeys ExpressionSpacing HereDocCommands ImportPlacement ImportSorted ImportWhitespace InputName InputSorted KnownRules LineWidth LintDirectiveFormatted LintDirectiveValid MatchingOutputMeta MetaDescription MetaKeyValueFormatting MetaSections OutputName OutputSection ParameterMetaMatched PascalCase PreambleCommentPlacement PreambleFormatted RedundantNone RequirementsSection RuntimeSection SectionOrdering ShellCheck SnakeCase TodoComment TrailingComma UnnecessaryFunctionCall UnusedCall UnusedDeclaration UnusedImport UnusedInput VersionStatementFormatted Whitespace)' \
'-m+[The report mode]:MODE:((full\:"Prints diagnostics as multiple lines"
one-line\:"Prints diagnostics as one line"))' \
'--report-mode=[The report mode]:MODE:((full\:"Prints diagnostics as multiple lines"
one-line\:"Prints diagnostics as one line"))' \
'--deny-warnings[Causes the command to fail if warnings were reported]' \
'--deny-notes[Causes the command to fail if notes were reported]' \
'--suppress-imports[Suppress diagnostics from documents that were not explicitly provided in the sources list (i.e., were imported from a provided source)]' \
'--show-remote-diagnostics[Show diagnostics for remote documents]' \
'--hide-notes[Hide diagnostics with \`note\` severity]' \
'--no-color[Disables color output]' \
'-l[Enable lint checks in addition to validation errors]' \
'--lint[Enable lint checks in addition to validation errors]' \
'*-v[Increase logging verbosity]' \
'*--verbose[Increase logging verbosity]' \
'(-v --verbose)*-q[Decrease logging verbosity]' \
'(-v --verbose)*--quiet[Decrease logging verbosity]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
'-V[Print version]' \
'--version[Print version]' \
'*::sources -- A set of source documents as files, directories, or URLs:_default' \
&& ret=0
;;
(completions)
_arguments "${_arguments_options[@]}" : \
'*-v[Increase logging verbosity]' \
'*--verbose[Increase logging verbosity]' \
'(-v --verbose)*-q[Decrease logging verbosity]' \
'(-v --verbose)*--quiet[Decrease logging verbosity]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
':shell -- The shell to generate completions for:(bash elvish fish powershell zsh)' \
&& ret=0
;;
(config)
_arguments "${_arguments_options[@]}" : \
'*-v[Increase logging verbosity]' \
'*--verbose[Increase logging verbosity]' \
'(-v --verbose)*-q[Decrease logging verbosity]' \
'(-v --verbose)*--quiet[Decrease logging verbosity]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
":: :_sprocket__config_commands" \
"*::: :->config" \
&& ret=0

    case $state in
    (config)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:sprocket-config-command-$line[1]:"
        case $line[1] in
            (init)
_arguments "${_arguments_options[@]}" : \
'*-v[Increase logging verbosity]' \
'*--verbose[Increase logging verbosity]' \
'(-v --verbose)*-q[Decrease logging verbosity]' \
'(-v --verbose)*--quiet[Decrease logging verbosity]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
&& ret=0
;;
(resolve)
_arguments "${_arguments_options[@]}" : \
'*-v[Increase logging verbosity]' \
'*--verbose[Increase logging verbosity]' \
'(-v --verbose)*-q[Decrease logging verbosity]' \
'(-v --verbose)*--quiet[Decrease logging verbosity]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
":: :_sprocket__config__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:sprocket-config-help-command-$line[1]:"
        case $line[1] in
            (init)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(resolve)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(explain)
_arguments "${_arguments_options[@]}" : \
'(--definitions)-t+[List all rules with the given tag]:TAG:(Clarity Completeness Correctness Deprecated Naming Portability Sorting Spacing Style)' \
'(--definitions)--tag=[List all rules with the given tag]:TAG:(Clarity Completeness Correctness Deprecated Naming Portability Sorting Spacing Style)' \
'(-t --tag)--definitions[Display general WDL definitions]' \
'(--list-all-tags)--list-all-rules[Lists all rules and exits]' \
'(--list-all-rules)--list-all-tags[Lists all tags and exits]' \
'*-v[Increase logging verbosity]' \
'*--verbose[Increase logging verbosity]' \
'(-v --verbose)*-q[Decrease logging verbosity]' \
'(-v --verbose)*--quiet[Decrease logging verbosity]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
'::rule_name -- The name of the rule to explain:(CallInputSpacing CommandSectionIndentation CommentWhitespace ConciseInput ConsistentNewlines ContainerUri DeclarationName DeprecatedObject DeprecatedPlaceholder DoubleQuotes ElementSpacing EndingNewline ExpectedRuntimeKeys ExpressionSpacing HereDocCommands ImportPlacement ImportSorted ImportWhitespace InputName InputSorted KnownRules LineWidth LintDirectiveFormatted LintDirectiveValid MatchingOutputMeta MetaDescription MetaKeyValueFormatting MetaSections OutputName OutputSection ParameterMetaMatched PascalCase PreambleCommentPlacement PreambleFormatted RedundantNone RequirementsSection RuntimeSection SectionOrdering ShellCheck SnakeCase TodoComment TrailingComma UnnecessaryFunctionCall UnusedCall UnusedDeclaration UnusedImport UnusedInput VersionStatementFormatted Whitespace)' \
&& ret=0
;;
(format)
_arguments "${_arguments_options[@]}" : \
'-m+[The report mode]:MODE:((full\:"Prints diagnostics as multiple lines"
one-line\:"Prints diagnostics as one line"))' \
'--report-mode=[The report mode]:MODE:((full\:"Prints diagnostics as multiple lines"
one-line\:"Prints diagnostics as one line"))' \
'(--with-tabs)--indentation-size=[The number of spaces to use for indentation levels (default is 4)]:SIZE:_default' \
'--max-line-length=[The maximum line length (default is 90)]:LENGTH:_default' \
'--no-color[Disables color output]' \
'--with-tabs[Use tabs for indentation (default is spaces)]' \
'(--check)--overwrite[Overwrite the WDL documents with the formatted versions]' \
'--check[Check if files are formatted correctly and print diff if not]' \
'*-v[Increase logging verbosity]' \
'*--verbose[Increase logging verbosity]' \
'(-v --verbose)*-q[Decrease logging verbosity]' \
'(-v --verbose)*--quiet[Decrease logging verbosity]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
'-V[Print version]' \
'--version[Print version]' \
':path -- The path to the WDL document or a directory containing WDL documents to format or check (`-` for STDIN):_files' \
&& ret=0
;;
(inputs)
_arguments "${_arguments_options[@]}" : \
'-n+[The name of the task or workflow for which to generate inputs]:NAME:_default' \
'--name=[The name of the task or workflow for which to generate inputs]:NAME:_default' \
'--show-expressions[Show inputs with non-literal default values]' \
'(--show-expressions)--hide-defaults[Hide inputs with default values]' \
'--nested-inputs[Generate inputs for all tasks called in the workflow]' \
'--yaml[Output the template as a YAML file]' \
'*-v[Increase logging verbosity]' \
'*--verbose[Increase logging verbosity]' \
'(-v --verbose)*-q[Decrease logging verbosity]' \
'(-v --verbose)*--quiet[Decrease logging verbosity]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
':source -- A source WDL file or URL:_default' \
&& ret=0
;;
(lint)
_arguments "${_arguments_options[@]}" : \
'*-e+[Excepts (ignores) an analysis or lint rule]:RULE:(CallInputSpacing CommandSectionIndentation CommentWhitespace ConciseInput ConsistentNewlines ContainerUri DeclarationName DeprecatedObject DeprecatedPlaceholder DoubleQuotes ElementSpacing EndingNewline ExpectedRuntimeKeys ExpressionSpacing HereDocCommands ImportPlacement ImportSorted ImportWhitespace InputName InputSorted KnownRules LineWidth LintDirectiveFormatted LintDirectiveValid MatchingOutputMeta MetaDescription MetaKeyValueFormatting MetaSections OutputName OutputSection ParameterMetaMatched PascalCase PreambleCommentPlacement PreambleFormatted RedundantNone RequirementsSection RuntimeSection SectionOrdering ShellCheck SnakeCase TodoComment TrailingComma UnnecessaryFunctionCall UnusedCall UnusedDeclaration UnusedImport UnusedInput VersionStatementFormatted Whitespace)' \
'*--except=[Excepts (ignores) an analysis or lint rule]:RULE:(CallInputSpacing CommandSectionIndentation CommentWhitespace ConciseInput ConsistentNewlines ContainerUri DeclarationName DeprecatedObject DeprecatedPlaceholder DoubleQuotes ElementSpacing EndingNewline ExpectedRuntimeKeys ExpressionSpacing HereDocCommands ImportPlacement ImportSorted ImportWhitespace InputName InputSorted KnownRules LineWidth LintDirectiveFormatted LintDirectiveValid MatchingOutputMeta MetaDescription MetaKeyValueFormatting MetaSections OutputName OutputSection ParameterMetaMatched PascalCase PreambleCommentPlacement PreambleFormatted RedundantNone RequirementsSection RuntimeSection SectionOrdering ShellCheck SnakeCase TodoComment TrailingComma UnnecessaryFunctionCall UnusedCall UnusedDeclaration UnusedImport UnusedInput VersionStatementFormatted Whitespace)' \
'-m+[The report mode]:MODE:((full\:"Prints diagnostics as multiple lines"
one-line\:"Prints diagnostics as one line"))' \
'--report-mode=[The report mode]:MODE:((full\:"Prints diagnostics as multiple lines"
one-line\:"Prints diagnostics as one line"))' \
'--deny-warnings[Causes the command to fail if warnings were reported]' \
'--deny-notes[Causes the command to fail if notes were reported]' \
'--suppress-imports[Suppress diagnostics from documents that were not explicitly provided in the sources list (i.e., were imported from a provided source)]' \
'--show-remote-diagnostics[Show diagnostics for remote documents]' \
'--hide-notes[Hide diagnostics with \`note\` severity]' \
'--no-color[Disables color output]' \
'*-v[Increase logging verbosity]' \
'*--verbose[Increase logging verbosity]' \
'(-v --verbose)*-q[Decrease logging verbosity]' \
'(-v --verbose)*--quiet[Decrease logging verbosity]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
'-V[Print version]' \
'--version[Print version]' \
'*::sources -- A set of source documents as files, directories, or URLs:_default' \
&& ret=0
;;
(run)
_arguments "${_arguments_options[@]}" : \
'-n+[The name of the task or workflow to run]:NAME:_default' \
'--name=[The name of the task or workflow to run]:NAME:_default' \
'-o+[The execution output directory; defaults to the task name if provided, otherwise, \`output\`]:OUTPUT_DIR:_files' \
'--output=[The execution output directory; defaults to the task name if provided, otherwise, \`output\`]:OUTPUT_DIR:_files' \
'-c+[The path to the engine TOML configuration file]:CONFIG:_files' \
'--config=[The path to the engine TOML configuration file]:CONFIG:_files' \
'-m+[The report mode]:MODE:((full\:"Prints diagnostics as multiple lines"
one-line\:"Prints diagnostics as one line"))' \
'--report-mode=[The report mode]:MODE:((full\:"Prints diagnostics as multiple lines"
one-line\:"Prints diagnostics as one line"))' \
'--overwrite[Overwrites the execution output directory if it exists]' \
'--no-color[Disables color output]' \
'*-v[Increase logging verbosity]' \
'*--verbose[Increase logging verbosity]' \
'(-v --verbose)*-q[Decrease logging verbosity]' \
'(-v --verbose)*--quiet[Decrease logging verbosity]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
':source -- A source WDL file or URL:_default' \
'*::inputs -- The inputs for the task or workflow:_default' \
&& ret=0
;;
(validate)
_arguments "${_arguments_options[@]}" : \
'-n+[The name of the task or workflow to validate inputs against]:NAME:_default' \
'--name=[The name of the task or workflow to validate inputs against]:NAME:_default' \
'-m+[The report mode]:MODE:((full\:"Prints diagnostics as multiple lines"
one-line\:"Prints diagnostics as one line"))' \
'--report-mode=[The report mode]:MODE:((full\:"Prints diagnostics as multiple lines"
one-line\:"Prints diagnostics as one line"))' \
'--no-color[Disables color output]' \
'*-v[Increase logging verbosity]' \
'*--verbose[Increase logging verbosity]' \
'(-v --verbose)*-q[Decrease logging verbosity]' \
'(-v --verbose)*--quiet[Decrease logging verbosity]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
'-V[Print version]' \
'--version[Print version]' \
':source -- The path or URL to a document containing the task or workflow to validate inputs against:_default' \
'*::inputs -- The inputs for the task or workflow:_default' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
":: :_sprocket__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:sprocket-help-command-$line[1]:"
        case $line[1] in
            (analyzer)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(check)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(completions)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(config)
_arguments "${_arguments_options[@]}" : \
":: :_sprocket__help__config_commands" \
"*::: :->config" \
&& ret=0

    case $state in
    (config)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:sprocket-help-config-command-$line[1]:"
        case $line[1] in
            (init)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(resolve)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
(explain)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(format)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(inputs)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(lint)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(run)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(validate)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
}

(( $+functions[_sprocket_commands] )) ||
_sprocket_commands() {
    local commands; commands=(
'analyzer:Runs the Language Server Protocol (LSP) server' \
'check:Checks a document or a directory containing documents' \
'completions:Generates shell completions' \
'config:Display the effective configuration' \
'explain:Explains linting and validation rules' \
'format:Formats a document or a directory containing documents' \
'inputs:Writes the inputs schema for a WDL document' \
'lint:Lints a document or a directory containing documents' \
'run:Runs a task or workflow' \
'validate:Validate a set of inputs against a task or workflow' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'sprocket commands' commands "$@"
}
(( $+functions[_sprocket__analyzer_commands] )) ||
_sprocket__analyzer_commands() {
    local commands; commands=()
    _describe -t commands 'sprocket analyzer commands' commands "$@"
}
(( $+functions[_sprocket__check_commands] )) ||
_sprocket__check_commands() {
    local commands; commands=()
    _describe -t commands 'sprocket check commands' commands "$@"
}
(( $+functions[_sprocket__completions_commands] )) ||
_sprocket__completions_commands() {
    local commands; commands=()
    _describe -t commands 'sprocket completions commands' commands "$@"
}
(( $+functions[_sprocket__config_commands] )) ||
_sprocket__config_commands() {
    local commands; commands=(
'init:Generates a default configuration file' \
'resolve:Displays the current configuration' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'sprocket config commands' commands "$@"
}
(( $+functions[_sprocket__config__help_commands] )) ||
_sprocket__config__help_commands() {
    local commands; commands=(
'init:Generates a default configuration file' \
'resolve:Displays the current configuration' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'sprocket config help commands' commands "$@"
}
(( $+functions[_sprocket__config__help__help_commands] )) ||
_sprocket__config__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'sprocket config help help commands' commands "$@"
}
(( $+functions[_sprocket__config__help__init_commands] )) ||
_sprocket__config__help__init_commands() {
    local commands; commands=()
    _describe -t commands 'sprocket config help init commands' commands "$@"
}
(( $+functions[_sprocket__config__help__resolve_commands] )) ||
_sprocket__config__help__resolve_commands() {
    local commands; commands=()
    _describe -t commands 'sprocket config help resolve commands' commands "$@"
}
(( $+functions[_sprocket__config__init_commands] )) ||
_sprocket__config__init_commands() {
    local commands; commands=()
    _describe -t commands 'sprocket config init commands' commands "$@"
}
(( $+functions[_sprocket__config__resolve_commands] )) ||
_sprocket__config__resolve_commands() {
    local commands; commands=()
    _describe -t commands 'sprocket config resolve commands' commands "$@"
}
(( $+functions[_sprocket__explain_commands] )) ||
_sprocket__explain_commands() {
    local commands; commands=()
    _describe -t commands 'sprocket explain commands' commands "$@"
}
(( $+functions[_sprocket__format_commands] )) ||
_sprocket__format_commands() {
    local commands; commands=()
    _describe -t commands 'sprocket format commands' commands "$@"
}
(( $+functions[_sprocket__help_commands] )) ||
_sprocket__help_commands() {
    local commands; commands=(
'analyzer:Runs the Language Server Protocol (LSP) server' \
'check:Checks a document or a directory containing documents' \
'completions:Generates shell completions' \
'config:Display the effective configuration' \
'explain:Explains linting and validation rules' \
'format:Formats a document or a directory containing documents' \
'inputs:Writes the inputs schema for a WDL document' \
'lint:Lints a document or a directory containing documents' \
'run:Runs a task or workflow' \
'validate:Validate a set of inputs against a task or workflow' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'sprocket help commands' commands "$@"
}
(( $+functions[_sprocket__help__analyzer_commands] )) ||
_sprocket__help__analyzer_commands() {
    local commands; commands=()
    _describe -t commands 'sprocket help analyzer commands' commands "$@"
}
(( $+functions[_sprocket__help__check_commands] )) ||
_sprocket__help__check_commands() {
    local commands; commands=()
    _describe -t commands 'sprocket help check commands' commands "$@"
}
(( $+functions[_sprocket__help__completions_commands] )) ||
_sprocket__help__completions_commands() {
    local commands; commands=()
    _describe -t commands 'sprocket help completions commands' commands "$@"
}
(( $+functions[_sprocket__help__config_commands] )) ||
_sprocket__help__config_commands() {
    local commands; commands=(
'init:Generates a default configuration file' \
'resolve:Displays the current configuration' \
    )
    _describe -t commands 'sprocket help config commands' commands "$@"
}
(( $+functions[_sprocket__help__config__init_commands] )) ||
_sprocket__help__config__init_commands() {
    local commands; commands=()
    _describe -t commands 'sprocket help config init commands' commands "$@"
}
(( $+functions[_sprocket__help__config__resolve_commands] )) ||
_sprocket__help__config__resolve_commands() {
    local commands; commands=()
    _describe -t commands 'sprocket help config resolve commands' commands "$@"
}
(( $+functions[_sprocket__help__explain_commands] )) ||
_sprocket__help__explain_commands() {
    local commands; commands=()
    _describe -t commands 'sprocket help explain commands' commands "$@"
}
(( $+functions[_sprocket__help__format_commands] )) ||
_sprocket__help__format_commands() {
    local commands; commands=()
    _describe -t commands 'sprocket help format commands' commands "$@"
}
(( $+functions[_sprocket__help__help_commands] )) ||
_sprocket__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'sprocket help help commands' commands "$@"
}
(( $+functions[_sprocket__help__inputs_commands] )) ||
_sprocket__help__inputs_commands() {
    local commands; commands=()
    _describe -t commands 'sprocket help inputs commands' commands "$@"
}
(( $+functions[_sprocket__help__lint_commands] )) ||
_sprocket__help__lint_commands() {
    local commands; commands=()
    _describe -t commands 'sprocket help lint commands' commands "$@"
}
(( $+functions[_sprocket__help__run_commands] )) ||
_sprocket__help__run_commands() {
    local commands; commands=()
    _describe -t commands 'sprocket help run commands' commands "$@"
}
(( $+functions[_sprocket__help__validate_commands] )) ||
_sprocket__help__validate_commands() {
    local commands; commands=()
    _describe -t commands 'sprocket help validate commands' commands "$@"
}
(( $+functions[_sprocket__inputs_commands] )) ||
_sprocket__inputs_commands() {
    local commands; commands=()
    _describe -t commands 'sprocket inputs commands' commands "$@"
}
(( $+functions[_sprocket__lint_commands] )) ||
_sprocket__lint_commands() {
    local commands; commands=()
    _describe -t commands 'sprocket lint commands' commands "$@"
}
(( $+functions[_sprocket__run_commands] )) ||
_sprocket__run_commands() {
    local commands; commands=()
    _describe -t commands 'sprocket run commands' commands "$@"
}
(( $+functions[_sprocket__validate_commands] )) ||
_sprocket__validate_commands() {
    local commands; commands=()
    _describe -t commands 'sprocket validate commands' commands "$@"
}

if [ "$funcstack[1]" = "_sprocket" ]; then
    _sprocket "$@"
else
    compdef _sprocket sprocket
fi
