_sprocket() {
    local i cur prev opts cmd
    COMPREPLY=()
    if [[ "${BASH_VERSINFO[0]}" -ge 4 ]]; then
        cur="$2"
    else
        cur="${COMP_WORDS[COMP_CWORD]}"
    fi
    prev="$3"
    cmd=""
    opts=""

    for i in "${COMP_WORDS[@]:0:COMP_CWORD}"
    do
        case "${cmd},${i}" in
            ",$1")
                cmd="sprocket"
                ;;
            sprocket,analyzer)
                cmd="sprocket__analyzer"
                ;;
            sprocket,check)
                cmd="sprocket__check"
                ;;
            sprocket,completions)
                cmd="sprocket__completions"
                ;;
            sprocket,config)
                cmd="sprocket__config"
                ;;
            sprocket,explain)
                cmd="sprocket__explain"
                ;;
            sprocket,format)
                cmd="sprocket__format"
                ;;
            sprocket,help)
                cmd="sprocket__help"
                ;;
            sprocket,inputs)
                cmd="sprocket__inputs"
                ;;
            sprocket,lint)
                cmd="sprocket__lint"
                ;;
            sprocket,run)
                cmd="sprocket__run"
                ;;
            sprocket,validate)
                cmd="sprocket__validate"
                ;;
            sprocket__config,help)
                cmd="sprocket__config__help"
                ;;
            sprocket__config,init)
                cmd="sprocket__config__init"
                ;;
            sprocket__config,resolve)
                cmd="sprocket__config__resolve"
                ;;
            sprocket__config__help,help)
                cmd="sprocket__config__help__help"
                ;;
            sprocket__config__help,init)
                cmd="sprocket__config__help__init"
                ;;
            sprocket__config__help,resolve)
                cmd="sprocket__config__help__resolve"
                ;;
            sprocket__help,analyzer)
                cmd="sprocket__help__analyzer"
                ;;
            sprocket__help,check)
                cmd="sprocket__help__check"
                ;;
            sprocket__help,completions)
                cmd="sprocket__help__completions"
                ;;
            sprocket__help,config)
                cmd="sprocket__help__config"
                ;;
            sprocket__help,explain)
                cmd="sprocket__help__explain"
                ;;
            sprocket__help,format)
                cmd="sprocket__help__format"
                ;;
            sprocket__help,help)
                cmd="sprocket__help__help"
                ;;
            sprocket__help,inputs)
                cmd="sprocket__help__inputs"
                ;;
            sprocket__help,lint)
                cmd="sprocket__help__lint"
                ;;
            sprocket__help,run)
                cmd="sprocket__help__run"
                ;;
            sprocket__help,validate)
                cmd="sprocket__help__validate"
                ;;
            sprocket__help__config,init)
                cmd="sprocket__help__config__init"
                ;;
            sprocket__help__config,resolve)
                cmd="sprocket__help__config__resolve"
                ;;
            *)
                ;;
        esac
    done

    case "${cmd}" in
        sprocket)
            opts="-v -q -c -s -h -V --verbose --quiet --config --skip-config-search --help --version analyzer check completions config explain format inputs lint run validate help"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 1 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                --config)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                -c)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        sprocket__analyzer)
            opts="-v -q -h -V --stdio --lint --verbose --quiet --help --version"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        sprocket__check)
            opts="-e -m -l -v -q -h -V --except --deny-warnings --deny-notes --suppress-imports --show-remote-diagnostics --hide-notes --no-color --report-mode --lint --verbose --quiet --help --version [PATH or URL]..."
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                --except)
                    COMPREPLY=($(compgen -W "CallInputSpacing CommandSectionIndentation CommentWhitespace ConciseInput ConsistentNewlines ContainerUri DeclarationName DeprecatedObject DeprecatedPlaceholder DoubleQuotes ElementSpacing EndingNewline ExpectedRuntimeKeys ExpressionSpacing HereDocCommands ImportPlacement ImportSorted ImportWhitespace InputName InputSorted KnownRules LineWidth LintDirectiveFormatted LintDirectiveValid MatchingOutputMeta MetaDescription MetaKeyValueFormatting MetaSections OutputName OutputSection ParameterMetaMatched PascalCase PreambleCommentPlacement PreambleFormatted RedundantNone RequirementsSection RuntimeSection SectionOrdering ShellCheck SnakeCase TodoComment TrailingComma UnnecessaryFunctionCall UnusedCall UnusedDeclaration UnusedImport UnusedInput VersionStatementFormatted Whitespace" -- "${cur}"))
                    return 0
                    ;;
                -e)
                    COMPREPLY=($(compgen -W "CallInputSpacing CommandSectionIndentation CommentWhitespace ConciseInput ConsistentNewlines ContainerUri DeclarationName DeprecatedObject DeprecatedPlaceholder DoubleQuotes ElementSpacing EndingNewline ExpectedRuntimeKeys ExpressionSpacing HereDocCommands ImportPlacement ImportSorted ImportWhitespace InputName InputSorted KnownRules LineWidth LintDirectiveFormatted LintDirectiveValid MatchingOutputMeta MetaDescription MetaKeyValueFormatting MetaSections OutputName OutputSection ParameterMetaMatched PascalCase PreambleCommentPlacement PreambleFormatted RedundantNone RequirementsSection RuntimeSection SectionOrdering ShellCheck SnakeCase TodoComment TrailingComma UnnecessaryFunctionCall UnusedCall UnusedDeclaration UnusedImport UnusedInput VersionStatementFormatted Whitespace" -- "${cur}"))
                    return 0
                    ;;
                --report-mode)
                    COMPREPLY=($(compgen -W "full one-line" -- "${cur}"))
                    return 0
                    ;;
                -m)
                    COMPREPLY=($(compgen -W "full one-line" -- "${cur}"))
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        sprocket__completions)
            opts="-v -q -h -V --verbose --quiet --help --version bash elvish fish powershell zsh"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        sprocket__config)
            opts="-v -q -h -V --verbose --quiet --help --version init resolve help"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        sprocket__config__help)
            opts="init resolve help"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        sprocket__config__help__help)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        sprocket__config__help__init)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        sprocket__config__help__resolve)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        sprocket__config__init)
            opts="-v -q -h -V --verbose --quiet --help --version"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        sprocket__config__resolve)
            opts="-v -q -h -V --verbose --quiet --help --version"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        sprocket__explain)
            opts="-t -v -q -h -V --tag --definitions --list-all-rules --list-all-tags --verbose --quiet --help --version CallInputSpacing CommandSectionIndentation CommentWhitespace ConciseInput ConsistentNewlines ContainerUri DeclarationName DeprecatedObject DeprecatedPlaceholder DoubleQuotes ElementSpacing EndingNewline ExpectedRuntimeKeys ExpressionSpacing HereDocCommands ImportPlacement ImportSorted ImportWhitespace InputName InputSorted KnownRules LineWidth LintDirectiveFormatted LintDirectiveValid MatchingOutputMeta MetaDescription MetaKeyValueFormatting MetaSections OutputName OutputSection ParameterMetaMatched PascalCase PreambleCommentPlacement PreambleFormatted RedundantNone RequirementsSection RuntimeSection SectionOrdering ShellCheck SnakeCase TodoComment TrailingComma UnnecessaryFunctionCall UnusedCall UnusedDeclaration UnusedImport UnusedInput VersionStatementFormatted Whitespace"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                --tag)
                    COMPREPLY=($(compgen -W "Clarity Completeness Correctness Deprecated Naming Portability Sorting Spacing Style" -- "${cur}"))
                    return 0
                    ;;
                -t)
                    COMPREPLY=($(compgen -W "Clarity Completeness Correctness Deprecated Naming Portability Sorting Spacing Style" -- "${cur}"))
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        sprocket__format)
            opts="-m -v -q -h -V --no-color --report-mode --with-tabs --indentation-size --max-line-length --overwrite --check --verbose --quiet --help --version <PATH or DIR>"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                --report-mode)
                    COMPREPLY=($(compgen -W "full one-line" -- "${cur}"))
                    return 0
                    ;;
                -m)
                    COMPREPLY=($(compgen -W "full one-line" -- "${cur}"))
                    return 0
                    ;;
                --indentation-size)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                --max-line-length)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        sprocket__help)
            opts="analyzer check completions config explain format inputs lint run validate help"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        sprocket__help__analyzer)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        sprocket__help__check)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        sprocket__help__completions)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        sprocket__help__config)
            opts="init resolve"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        sprocket__help__config__init)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        sprocket__help__config__resolve)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        sprocket__help__explain)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        sprocket__help__format)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        sprocket__help__help)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        sprocket__help__inputs)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        sprocket__help__lint)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        sprocket__help__run)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        sprocket__help__validate)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        sprocket__inputs)
            opts="-n -v -q -h -V --name --show-expressions --hide-defaults --nested-inputs --yaml --verbose --quiet --help --version <PATH or URL>"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                --name)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                -n)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        sprocket__lint)
            opts="-e -m -v -q -h -V --except --deny-warnings --deny-notes --suppress-imports --show-remote-diagnostics --hide-notes --no-color --report-mode --verbose --quiet --help --version [PATH or URL]..."
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                --except)
                    COMPREPLY=($(compgen -W "CallInputSpacing CommandSectionIndentation CommentWhitespace ConciseInput ConsistentNewlines ContainerUri DeclarationName DeprecatedObject DeprecatedPlaceholder DoubleQuotes ElementSpacing EndingNewline ExpectedRuntimeKeys ExpressionSpacing HereDocCommands ImportPlacement ImportSorted ImportWhitespace InputName InputSorted KnownRules LineWidth LintDirectiveFormatted LintDirectiveValid MatchingOutputMeta MetaDescription MetaKeyValueFormatting MetaSections OutputName OutputSection ParameterMetaMatched PascalCase PreambleCommentPlacement PreambleFormatted RedundantNone RequirementsSection RuntimeSection SectionOrdering ShellCheck SnakeCase TodoComment TrailingComma UnnecessaryFunctionCall UnusedCall UnusedDeclaration UnusedImport UnusedInput VersionStatementFormatted Whitespace" -- "${cur}"))
                    return 0
                    ;;
                -e)
                    COMPREPLY=($(compgen -W "CallInputSpacing CommandSectionIndentation CommentWhitespace ConciseInput ConsistentNewlines ContainerUri DeclarationName DeprecatedObject DeprecatedPlaceholder DoubleQuotes ElementSpacing EndingNewline ExpectedRuntimeKeys ExpressionSpacing HereDocCommands ImportPlacement ImportSorted ImportWhitespace InputName InputSorted KnownRules LineWidth LintDirectiveFormatted LintDirectiveValid MatchingOutputMeta MetaDescription MetaKeyValueFormatting MetaSections OutputName OutputSection ParameterMetaMatched PascalCase PreambleCommentPlacement PreambleFormatted RedundantNone RequirementsSection RuntimeSection SectionOrdering ShellCheck SnakeCase TodoComment TrailingComma UnnecessaryFunctionCall UnusedCall UnusedDeclaration UnusedImport UnusedInput VersionStatementFormatted Whitespace" -- "${cur}"))
                    return 0
                    ;;
                --report-mode)
                    COMPREPLY=($(compgen -W "full one-line" -- "${cur}"))
                    return 0
                    ;;
                -m)
                    COMPREPLY=($(compgen -W "full one-line" -- "${cur}"))
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        sprocket__run)
            opts="-n -o -m -v -q -h --name --output --overwrite --no-color --report-mode --verbose --quiet --help <PATH or URL> [INPUTS]..."
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                --name)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                -n)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                --output)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                -o)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                --report-mode)
                    COMPREPLY=($(compgen -W "full one-line" -- "${cur}"))
                    return 0
                    ;;
                -m)
                    COMPREPLY=($(compgen -W "full one-line" -- "${cur}"))
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        sprocket__validate)
            opts="-n -m -v -q -h -V --name --no-color --report-mode --verbose --quiet --help --version <PATH or URL> [INPUTS]..."
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                --name)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                -n)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                --report-mode)
                    COMPREPLY=($(compgen -W "full one-line" -- "${cur}"))
                    return 0
                    ;;
                -m)
                    COMPREPLY=($(compgen -W "full one-line" -- "${cur}"))
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
    esac
}

if [[ "${BASH_VERSINFO[0]}" -eq 4 && "${BASH_VERSINFO[1]}" -ge 4 || "${BASH_VERSINFO[0]}" -gt 4 ]]; then
    complete -F _sprocket -o nosort -o bashdefault -o default sprocket
else
    complete -F _sprocket -o bashdefault -o default sprocket
fi
